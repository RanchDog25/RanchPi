The logs show that the system is now successfully detecting your Raspberry Pi, loading picamera2, and initializing the camera hardware—but then it fails with:

vbnet
Copy
[...]
INFO Camera camera.cpp:1008 Pipeline handler in use by another process
ERROR - Camera __init__ sequence did not complete.
This indicates that although the camera hardware is accessible (as confirmed by the 142-frame output from libcamera-hello earlier), something is still “holding” the camera pipeline so that your application cannot exclusively use it. In other words, either:

A previous instance of your camera application (or another process) is still using the camera, or
The camera isn’t being fully released between runs, causing a conflict when your app tries to reinitialize it.
What This Means and What to Do Next
The 142-Frame Test as a Positive Sign:

When you ran libcamera-hello earlier (or saw frame output), that confirmed that the camera hardware and drivers are working correctly.
The fact that you saw frames means the hardware is functional; however, your custom application (using picamera2) isn’t able to acquire exclusive access because something else appears to be using the camera pipeline.
Checking for Conflicting Processes:

Use tools like lsof or fuser (which you tried) to verify that no other process is using the camera devices:
bash
Copy
sudo lsof /dev/media0
sudo lsof /dev/media1
If nothing is shown, it might be that a previous instance of your app hasn’t terminated properly.
Reboot to Clear Residual Locks:

Since you already rebooted and still see the error, make sure that you’re not inadvertently starting multiple instances of your application. A clean reboot is a good first step, and it seems you’ve already done that.
Permissions and Ownership:

The earlier permission error on /dev/dma_heap/linux,cma was addressed by running as root.
However, even with the proper permissions, the “Pipeline handler in use” error suggests the camera is busy.
You may need to ensure that your user (or the process running your app) has exclusive access by adjusting device permissions with a udev rule (for example, setting group ownership to the video group and proper mode) or by running your application as root using the virtual environment’s interpreter:
bash
Copy
sudo /home/admin/RanchPi/venv/bin/python3 camera_app.py
(This ensures that your app uses the virtual environment’s Python while having the necessary privileges.)
Review Your Application Code:

Double-check that your code isn’t attempting to initialize the camera multiple times or in a way that might cause conflicts.
Ensure that once you’re done capturing or streaming, the camera is properly closed so that the pipeline is freed for the next initialization.
In Summary
The 142-frame output from libcamera-hello is a good sign that your camera hardware and drivers are working.
The "Pipeline handler in use" error means another process (or a previous instance) is still using the camera.
Next Steps:
Verify no stray processes are using the camera devices (using lsof/fuser).
Consider rebooting again if needed and ensure you’re only starting one instance of your application.
Adjust permissions or run your app with elevated privileges if necessary.
Review your code to make sure the camera is opened only once and closed properly afterward.
Once these steps are taken, your application should be able to initialize the real camera rather than falling back to the mock camera.